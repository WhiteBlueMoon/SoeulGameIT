--1.Shader에 대해--
우선 유니티 Shader에 대해 먼저 알아야 할 것은 ShaderLab이다.
ShaderLab은 유니티에서 제공하는 Shader 스크립트 언어로 다양한 플렛폼, 디바이스에 대응하기 위해 만들어졌다.
Shader "MyCustomShader"
{
	SubShader
	{
		// body
	}
}
이 코드가 ShaderLab의 기본인데, 하나의 Shader블록이 있고 그 내부에 SubShader가 있는 형태다.
MyCustomShader 부분이 해당 Shader의 이름이다.
body 부분이 실제 Shader의 구현 부분이다.
난 이 코드를 보면서 왜 굳이 SubShader가 있어야 하는지 의문이 들었는데, 이는 하드웨어가 다양하기 때문이다.
Shader "MyCustomShader"
{
	SubShader{
		// A급 하드웨어
	}
	SubShader{
		// B급 하드웨어
	}
	SubShader{
		// 그외 최저사양
	}
  Fallback "name"
}
때문에 이런 코드로 작성해 각 SubShader들 중에서 현재 하드웨어에 가장 맞는 Shader를 사용한다.
여기서 Fallback의 역할은 모든 SubShader가 현재 하드웨어에 맞지 않는 경우에 사용되는 것으로 "name" 이름을 가진 Shader 오브젝트를 사용한다.


--2. pass--
SubShader 안의 Pass 개수 만큼 오브젝트가 랜더링 된다.


--3.Properties--
Meterial의 Inspector창에 나타난다.
변수명, display name, 형식, 초기값 순서로 작성한다.
변수명		: _을 붙여 입력받았다는 의미를 나타낸다.
display name 	: Inspector창에 나타나는 이름이다.
형식 		: 어떤 타입의 인터페이스를 만들지를 정한다.
초기값		: Shader가 처음 만들어질 때 지정된 초기값으로 만들어진다.

더 자세한 내용은
https://ssan.tistory.com/15
를 참고하자.


--4. CGPROGRAM ~ ENDCG--
이 부분은 ShaderLab 언어가 아닌 HLSL코드로 작성한다.
#pragma는 전처리를 해주는데

#pragma vertext vert
vertex shader 메서드 이름을 vert로 설정
#pragma fragment frag
fragment shader 메서드 이름을 frag 설정
이런 의미를 가진다.

Properties에서 만든 변수를 사용하려면 CGPROGRAM ~ ENDCG사이에 선언해야 한다.


--5. Tags--
SubShader Tag의 경우 랜더링 엔진을 렌더링할 방법과 시기를 지정한다.
항상 Key-Value의 쌍으로 선언해야 한다.

Tags { "TagName1" = "Value1" "TagName2" = "Value2"}
TagName1에 Value1을, TagName2에 Value2를 지정한다. 태그를 원하는 수만큼 지정할 수 있다.

Queue는 오브젝트를 그리는 순서를 결정하는 값으로 값이 낮을 수록 먼저 렌더링 된다.
Queue의 종류(사전에 정의된 Queue)
-Background : 가장 먼저 렌더링된다. 보통 배경에 사용된다. 정수값은 1000
-Geometry(기본) : 대부분 오브젝트에 사용된다. 불투명 오브젝트에 사용된다. 정수값은 2000
-AlphaTest : 투명 오브젝트에 사용된다. 정수값은 2450
-Transparent : Geometry와 AlphaTest뒤에 렌더링되는 오브젝트. 정수값은 3000
-Overlay : 오버레이 효과를 위해 사용된다. 마지막으로 랜더링하는 오브젝트에 사용된다. 정수값은 4000

RenderType은 쉐이더를 사전에 정의된 그룹으로 분류한다.
RenderType의 종류
-Opaque: 대부분의 불투명한 쉐이더.
-Transparent: 대부분의 부분적으로 투명한 쉐이더
-TransparentCutout: 마스킹 된 투명 쉐이더
-Background: Skybox 쉐이더.
-Overlay: GUITexture, 후광(Halo), 플레어 쉐이더(Flare shaders).
-TreeOpaque: Terrain 나무 껍질.
-TreeTransparentCutout: Terrain 나뭇잎.
-TreeBillboard: Terrain 빌보드 Tree.
-Grass: Terrain grass.
-GrassBillboard: Terrain 빌보드 Grass.

Queue와 RanderType말고도 Tags에 사용할 수 있는 키 값은 https://docs.unity3d.com/kr/530/Manual/SL-SubShaderTags.html을 참조


--6.UnityObjectToClipPos()--
우선 3D 렌더링에서 용도에 따른 좌표공간 구분을 알아야 한다.
Model Space : 3D모델의 각 vertex좌표가 모델마다 설정된 원점을 중심으로 설정됨.
World Space : 원점은 세계의 중심으로 Scene View에서 보이는 여러 모델의 좌표 변환.
View Space : World Space에 배치된 모델들을 카메라 위치를 원점으로 좌표 변환.
Clip Space : 오브젝트가 화면에 보이는지를 판단한다.

Model Space에서 Clip Space 순서로 좌표를 변환하는데 UnityObjectToClipPos이 함수는 좌표 변환을 자동으로 해준다.
